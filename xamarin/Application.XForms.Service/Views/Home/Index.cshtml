@model WindnTreesSEO.Models.ProductViewModel
@{
    ViewData["Title"] = "Products page";
}

<!--Results awaiting status message template-->
<script type="text/html" id="results_processing">
    <span class="d-flex justify-content-end">
        <i class="fa fa-cog fa-spin" data-bind="visible: Processing()"></i>
    </span>
</script>

<!--Result message template-->
<script type="text/html" id="results_messages">
    <span class="alert p-0 d-flex justify-content-start" data-bind="if: ResultMessage().length > 0">
        <span data-bind="text: ResultMessage"></span>
    </span>
</script>

<!--Server side error message template-->
<script type="text/html" id="list_error_messages">
    <li class="alert alert-danger"><span data-bind="text: errField"></span> <span data-bind="text: errMessage"></span></li>
</script>

<!--search actions-->
<!--changes: find is replaced with customized extended "search" function and referential "lists" are integrated. -->
<script type='text/html' id='actions'>
    <div class='col-sm-12 col-md-12 col-lg-12'>
        <div class='input-group'>
            <span class='input-group-prepend'><button data-bind='click: function() { resetForm(); }' class='btn btn-primary' type='button' title='New' data-toggle='modal' data-target='#__form'><span>New</span></button></span>
            <input class='form-control' data-bind='value: Keyword' type='text' placeholder='Keyword' />
            <span class='input-group-append'>
                <select data-bind="options: $root.CategoriesList, optionsText: 'key', optionsValue: 'key', value: $root.Category, optionsCaption: 'select category'" title="Select Category"
                        id="searchCategory" class="form-control col-12"></select>
            </span>
            <span class='input-group-append'>
                <button data-bind='click: function() { search(1); }' class='btn btn-primary' type='button' title='Search'><span>Search</span></button>
            </span>
        </div>
    </div>
</script>

<!--standard listing-->
<script type='text/html' id='standard_listings'>
    <div class='col-sm-12 col-md-6 col-lg-6 order-first'>
        <div class='input-group justify-content-start'>
            <span class='input-group-prepend'><span class='input-group-text'>Size</span></span>
            <select class='form-control col-2' data-bind="value: ListSize, event: { change: function() { list(CurrentList()); } }" id='form-field-select-1' style='width:auto;'>
                <option value='10'>10</option>
                <option value='20'>20</option>
                <option value='50'>50</option>
                <option value='100'>100</option>
            </select>
        </div>
    </div>
    <div class='col-sm-12 col-md-6 col-lg-6 order-last'>
        <nav class="d-flex justify-content-end" aria-label="Listings">
            <ul class="pagination">
                <li class="page-item" data-bind="css: {disabled: CurrentList() === 1 }"><a class="page-link" href="#" data-bind="click: function() { list(CurrentList() - 1); }">Prev</a></li>
                <!-- ko foreach: ListNavigator().getLists() -->
                <li class="page-item"><a class="page-link" href="#" data-bind="click: function() { list(CurrentList()); }"><span data-bind="text: Number"></span></a></li>
                <!-- /ko -->
                <li class="page-item" data-bind="css: {disabled: CurrentList() === ListNavigator().calculateTotalPages()}"><a class="page-link" href="#" data-bind="click: function() { list(CurrentList() + 1); }">Next</a></li>
            </ul>
        </nav>
    </div>
</script>

<!--listing item-->
<script type="text/html" id="listitem">
    <li>
        <div class="row">
            <div class="col-sm-12 col-md-12 col-lg-12">
                <h4 data-bind="text: Name()"></h4>
                <p><span class="pr-2">Year: <span data-bind="text: ProductYear()"></span></span><span class="pr-2">Category: <span data-bind="text: Category()"></span></span></p>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 col-md-12 col-lg-12">
                <textarea class="form-control col-12" data-bind="html: Description()" readonly></textarea>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 col-md-12 col-lg-12">
                <span class="d-flex justify-content-end">
                    <a class="green p-2" href="#" data-bind="click: function(data, event) { $parent.resetFormForEditing($index); }" data-toggle="modal" data-target="#__form" title="Edit"><i class="fa fa-edit text-success"></i>Edit</a>
                    <a class="red p-2" href="#" data-bind="click: function(data, event) { $parent.delete($data); }" title="Delete"><i class="fa fa-times text-danger"></i>Delete</a>
                </span>
            </div>
        </div>
    </li>
</script>

<!--form content-->
<script type="text/html" id="formcontent">
    <div class="row">
        <div class="col-sm-12 col-md-4 col-lg-4 order-0">
            <label class="d-flex justify-content-start" for="CategoryId">
                Category
            </label>
            <select data-bind="options: $root.CategoriesList, optionsText: 'key', optionsValue: 'key', value: Category, optionsCaption: 'select category'" title="Select Category"
                    id="CategoryId" class="form-control col-12"></select><span class="error" data-bind="validationMessage: Category"></span>
        </div>
        <div class="col-sm-12 col-md-4 col-lg-4 order-1"></div>
        <div class="col-sm-12 col-md-4 col-lg-4 order-2"></div>
    </div>

    <div class="row">
        <div class="col-sm-12 col-md-12 col-lg-12 order-0">
            <label class="d-flex align-content-start" for="Name">
                Name
            </label>
            <input id="Name" name="Name" class="form-control col-12" data-bind="value: Name" type="text" title="Name"
                   maxlength="100" placeholder="" /><span class="error"
                                                          data-bind="validationMessage: Name"></span>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-12 col-md-12 col-lg-12 order-0">
            <label class="d-flex align-content-start" for="Description">
                Description
            </label>
            <textarea id="Description" name="Description" class="form-control col-12" data-bind="value: Description" maxlength="1024"></textarea>
            <span class="error" data-bind="validationMessage: Description"></span>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-12 col-md-12 col-lg-12 order-0">
            <label class="d-flex align-content-start" for="ProductYear">
                Year
            </label>
            <input id="Year" name="Year" class="form-control col-sm-12 col-md-4 col-lg-4" data-bind="value: ProductYear" type="text" title="Year"
                   maxlength="4" placeholder="" /><span class="error"
                                                        data-bind="validationMessage: ProductYear"></span>
        </div>
    </div>
</script>

<!--ko binding element-->
<div id="ko-binding-element" class="row p-0">
    <div class="col-sm-12 col-md-3 col-lg-3">
        <!--SEO Content-->
        <h5>New Products</h5>
        @foreach (var product in Model.NewProducts)
        {
            <div id="new-product-@product.Uid" title="@product.Name">
                <a href="#">@product.Name</a>
            </div>
        }
        <!--SEO Content END-->
    </div>
    <div class="col-sm-12 col-md-6 col-lg-6">
        <div class="container pl-0 pr-0 pb-2">
            <!--SEO Content with knockoutjs element-->
            <ul class="list-unstyled list-inline">
                @foreach (var category in Model.Categories)
                {
                    <li class="list-inline-item" id="new-product-@category.Uid" title="@category.Title">
                        <a href="#" data-bind="click: function() { Category('@category.Title'); search(1); }">@category.Title</a>
                    </li>
                }
            </ul>
            <!--SEO Content End-->
        </div>
        <div class="container pl-0 pr-0 pb-2">
            <!--Dynamic web application content based on knockoutjs binding-->
            <div class="card">
                <div class="card-header">
                    <div class="row">
                        <!-- Display action response result message. -->
                        <span class="col-sm-12 col-md-10 col-lg-10 order-first result" data-bind="template: {name: 'results_messages'}"></span>
                        <!-- Display processing status. -->
                        <span class="col-sm-12 col-md-2 col-lg-2 order-last status" data-bind="template: {name: 'results_processing'}"></span>
                    </div>
                    <div class="row" data-bind="if: Errors().length > 0">
                        <div class="col-sm-12 col-md-12 col-lg-12">
                            <!-- Display server-side validation errors list -->
                            <ul class='errorlist' data-bind="template: {name: 'list_error_messages' , foreach: Errors}"></ul>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Display action elements (new, search etc) -->
                    <div class="row" data-bind="template: {name: 'actions'}"></div>
                    <ul class="list-unstyled p-0" data-bind="template: {name: 'listitem', foreach: Records}"></ul>
                </div>
                <div class="card-footer">
                    <!-- Display table listing elements -->
                    <div class="row" data-bind="template: {name: 'standard_listings' }"></div>
                </div>
            </div>

            <!-- Modal form for saving input data -->
            <div id="__form" class="modal fade" style="display: none;">
                <div class="modal-dialog modal-dialog-centered" style="min-width: 800px;">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h4 class="col order-0">
                                <span class="d-flex justify-content-start" data-bind="text: getEditMode() ? getEditModeCaption() : getNewModeCaption()"></span>
                            </h4>
                            <div class="col order-1">
                                <span class="d-flex justify-content-end">
                                    <button type="button" data-dismiss="modal"><span>×</span></button>
                                </span>
                            </div>
                        </div>
                        <div class="modal-body">
                            <div class="row">
                                <span class="col-sm-12 col-md-10 col-lg-10 order-first result" data-bind="template: {name: 'results_messages'}"></span>
                                <span class="col-sm-12 col-md-2 col-lg-2 order-last status" data-bind="template: {name: 'results_processing'}"></span>
                            </div>
                            <div class="row" data-bind="if: Errors().length > 0">
                                <div class="col-sm-12 col-md-12 col-lg-12">
                                    <ul class='errorlist' data-bind="template: {name: 'list_error_messages' , foreach: Errors}"></ul>
                                </div>
                            </div>
                            <div data-bind="with: getFormObject()">
                                <div data-bind="template: {name: 'formcontent' }"></div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <span class="d-flex justify-content-end">
                                <span>
                                    <button type="button" id="btnCloseAddForm" class="btn btn-primary" data-dismiss="modal"><span>Close</span></button>
                                    <!-- invokes create, update method to save new and existing record. -->
                                    <!-- create/update are CRUD methods that are integrated in View (CRUDView) and linked with Observer (CRUDObserver composed of observables). -->
                                    <button type="button" data-bind="click: function() { getEditMode() ? update() : create(); }" id="btnAddEdit" class="btn btn-primary"><span>Save</span></button>
                                </span>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
            <!--Dynamic web application content END-->
        </div>
    </div>
    <div class="col-sm-12 col-md-3 col-lg-3">
        <h5>Top 5 Products</h5>
        <!--SEO Content-->
        @foreach (var product in Model.Top5Products)
        {
            <div id="top-product-@product.Uid" title="@product.Name">
                <a href="#">@product.Name</a>
            </div>
        }
        <!--SEO Content End-->
    </div>
</div>

@section Scripts {

    <script src="~/js/Models/Product.js" type="text/javascript"></script>

    <script type="text/javascript">

        //Messages repository required to display action results.
        //Note: You may remove following message repository initialization script,
        //however, then you should update knockout HTML templates accordingly.
        function intialize(repository) {

            repository.clean();
            repository.add(new LocaleMessage("form.new.text", "New"));
            repository.add(new LocaleMessage("form.edit.text", "Edit"));
            repository.add(new LocaleMessage("form.noRecord.text", "No record found."));
            repository.add(new LocaleMessage("form.found.text", "Found"));
            repository.add(new LocaleMessage("form.records.text", "Record(s)"));
            repository.add(new LocaleMessage("form.saved.text", "Saved"));
            repository.add(new LocaleMessage("form.failed.text", "Failed"));
            repository.add(new LocaleMessage("form.displayingPage.text", "Displaying page"));
            repository.add(new LocaleMessage("form.of.text", "of"));
            repository.add(new LocaleMessage("form.totalPages.text", ""));
            repository.add(new LocaleMessage("form.ok.text", "Ok"));
            repository.add(new LocaleMessage("standard.alertSure.text", "Are you sure to delete record?"));
            repository.add(new LocaleMessage("standard.processing.text", "Processing..."));
            repository.add(new LocaleMessage("standard.err.text", "Requested operation failed, an error occured while processing your request."));
            repository.add(new LocaleMessage("standard.ok.text", "Requested operation completed successfully."));
            repository.add(new LocaleMessage("standard.listloadok.text", "List loaded successfully."));
            repository.add(new LocaleMessage("standard.listloaderr.text", "List load failed."));

            return repository;
        }

        var view = new CRUDView({
            'uri': '/product', //service uri address
            'observer': new CRUDObserver({ 'contentType': new Product({}), 'messages': intialize(new MessageRepository()) }), // observer
            'fields': [ // related list fields that load related results simply
                {
                    'uri': '/category', // server side CRUDController uri address
                    'target': 'List', // CRUDController function that you want to invoke to get list results
                    'field': 'CategoriesList', // CRUDObserver will be extended with Categories list observable (ko.observableArray)
                    'key': 'Title', // key (display) field bound with dropdown list
                    'value': 'Title' // value field bound with dropdown list
                }]
        });

        //extend view with category and skilllevel observables
        view.getObserverObject().Category = ko.observable("");

        //search method
        view.getObserverObject().search = function (listNumber) {

            view.getObserverObject().list({
                //"query" lets user customize search parameters,
                //programmers can send content, key, keys, keywords, options etc.
                //using single query object.
                query: {
                    keyword: view.getObserverObject().Keyword(),
                    size: view.getObserverObject().ListSize(),
                    page: listNumber,
                    'keys': [
                        { 'field': 'category', 'value': view.getObserverObject().Category() }
                    ]
                }
            });
        };

        //Extends related observable fields like 'CategoriesList', 'SkillLevelsList'
        view.ExtendFields();

        $(function () {

            try {

                ko.validation.init({ insertMessages: false, decorateElement: true, errorElementClass: 'error' });
                ko.validation.registerExtenders();

                ko.applyBindings(view.getObserverObject(), document.getElementById('ko-binding-element'));
            }
            catch (e) {

                console.log(e.message);
            }

            //load fields
            view.LoadFields();

            //calls search with customized search input
            view.getObserverObject().search(1);
        });

    </script>
}