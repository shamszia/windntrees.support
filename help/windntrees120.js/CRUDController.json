{ "Scope":"", "Constraint": "", "Type":"function", "Name":"CRUDController", "Arguments": [ { "Name": "options", "Value": "" } ], "Description":"CRUDController offers AJAX based create, read, update and delete requests functionality. All requests take a URI (address) with or without resulting content type object information and produces response event notifications with resulting data or contents. CRUDController component operates on top of a CRUDSource and is responsible for data extraction and reporting to other components. Usually a CRUDController deals with a CRUDSource and a CRUDProcessor.", "Params": [  ], "Comments":"", "Annotations":"", "Constructs": { "Namespace": "", "Interfaces": [  ], "Constructors": [  ], "StaticConstructors": [  ], "Fields": [ { "Scope":"",  "Constraint": "", "Type": "", "Name":"instance.Key", "Description":"Key is unique identifier to differentiate between CRUD controllers and is optional.", "Comments":"", "Annotations":"" },{ "Scope":"",  "Constraint": "", "Type": "", "Name":"instance.Processing", "Description":"Processing is request status monitoring data member, true status value tells that request is in -process.", "Comments":"", "Annotations":"" },{ "Scope":"",  "Constraint": "", "Type": "", "Name":"instance.ResponseData", "Description":"ResponseData is the response result received after successful request completion.", "Comments":"", "Annotations":"" },{ "Scope":"",  "Constraint": "", "Type": "", "Name":"instance.ResponseError", "Description":"ResponseError is the response result received after failed request completion.", "Comments":"", "Annotations":"" } ], "Properties": [  ], "Methods": [  ], "InstanceFunctions": [ { "Scope":"", "Constraint": "", "Type":"", "Name":"instance.getKey", "Arguments": [  ], "Description":"Gets controller key.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"", "Constraint": "", "Type":"", "Name":"instance.getType", "Arguments": [  ], "Description":"Gets function construct type information.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"", "Constraint": "", "Type":"", "Name":"instance.processing", "Arguments": [  ], "Description":"Gets request processing status.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"", "Constraint": "", "Type":"", "Name":"instance.responseData", "Arguments": [  ], "Description":"Gets requested response data.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"", "Constraint": "", "Type":"", "Name":"instance.responseError", "Arguments": [  ], "Description":"Gets response error.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"", "Constraint": "", "Type":"", "Name":"instance.isResponseError", "Arguments": [  ], "Description":"Checks whether request yields in response error.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"", "Constraint": "", "Type":"", "Name":"instance.getContextPath", "Arguments": [ { "Name": "data", "Value": "" },{ "Name": "callback", "Value": "" } ], "Description":"Gets server side context path for the requested URI.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"", "Constraint": "", "Type":"", "Name":"instance.sendRequest", "Arguments": [ { "Name": "options", "Value": "" },{ "Name": "callback", "Value": "" } ], "Description":"Sends ajax request.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"", "Constraint": "", "Type":"", "Name":"instance.select", "Arguments": [ { "Name": "data", "Value": "" },{ "Name": "callback", "Value": "" } ], "Description":"Sends records selection request on a specified URI address that takes a URI address, a key value, a keyword, size and list (or page) number and notify request data in before.request.CRUD.WindnTrees event. A list of selected records is sent as response and is notified in after.request.CRUD.WindnTrees event.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"", "Constraint": "", "Type":"", "Name":"instance.selectList", "Arguments": [ { "Name": "data", "Value": "" },{ "Name": "callback", "Value": "" } ], "Description":"Sends records selection request on a specified URI address that takes a URI address, a key value, a keyword, size and list (or page) number and notify request data in before.request.CRUD.WindnTrees event. A list of selected records is sent as response and is notified in after.request.CRUD.WindnTrees event.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"", "Constraint": "", "Type":"", "Name":"instance.find", "Arguments": [ { "Name": "data", "Value": "" },{ "Name": "callback", "Value": "" } ], "Description":"Sends records selection request based on keyword, list number and list size on a specified URI address and notify request data in before.request.CRUD.WindnTrees event. A list of selected records is sent as response and is notified in after.request.CRUD.WindnTrees event.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"", "Constraint": "", "Type":"", "Name":"instance.list", "Arguments": [ { "Name": "data", "Value": "" },{ "Name": "callback", "Value": "" } ], "Description":"Sends records selection request based on keyword, list number and list size on specified URI address and notify request data in before.request.CRUD.WindnTrees event. A list of selected records is sent as response and is notified in after.request.CRUD.WindnTrees event.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"", "Constraint": "", "Type":"", "Name":"instance.listAll", "Arguments": [ { "Name": "data", "Value": "" },{ "Name": "callback", "Value": "" } ], "Description":"Sends all records selection request on specified URI address and notify request data in before.request.CRUD.WindnTrees event. A list of selected records is sent as response and is notified in after.request.CRUD.WindnTrees event.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"", "Constraint": "", "Type":"", "Name":"instance.get", "Arguments": [ { "Name": "data", "Value": "" },{ "Name": "callback", "Value": "" } ], "Description":"Gets response based on a key value using GET method and notify content in after event. In order to get a flex response object set additional request options", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"", "Constraint": "", "Type":"", "Name":"instance.post", "Arguments": [ { "Name": "data", "Value": "" },{ "Name": "callback", "Value": "" } ], "Description":"Gets response based on a composite key value using POST method and notify content in after event. In order to get a flex response object set", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"", "Constraint": "", "Type":"", "Name":"instance.create", "Arguments": [ { "Name": "data", "Value": "" },{ "Name": "callback", "Value": "" } ], "Description":"Creates new content object using POST method and notify result in after event.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"", "Constraint": "", "Type":"", "Name":"instance.update", "Arguments": [ { "Name": "data", "Value": "" },{ "Name": "callback", "Value": "" } ], "Description":"Updates existing content object using POST method and notify result in after event.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"", "Constraint": "", "Type":"", "Name":"instance.delete", "Arguments": [ { "Name": "data", "Value": "" },{ "Name": "callback", "Value": "" } ], "Description":"Deletes existing content object using POST method and notify result in after event.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"", "Constraint": "", "Type":"", "Name":"instance.notify", "Arguments": [ { "Name": "eventData", "Value": "" } ], "Description":"Makes event notification call.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"", "Constraint": "", "Type":"", "Name":"instance.notifyDone", "Arguments": [ { "Name": "data", "Value": "" },{ "Name": "textStatus", "Value": "" },{ "Name": "jqXHR", "Value": "" },{ "Name": "eventData", "Value": "" } ], "Description":"Processes successfull response event and notify data in after.request.CRUD.WindnTrees event.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"", "Constraint": "", "Type":"", "Name":"instance.notifyFail", "Arguments": [ { "Name": "jqXHR", "Value": "" },{ "Name": "textStatus", "Value": "" },{ "Name": "errorThrown", "Value": "" },{ "Name": "eventData", "Value": "" } ], "Description":"Processes failure response event and notify data in fail.request.CRUD.WindnTrees event.", "Params": [  ], "Comments":"", "Annotations":"" } ], "Indexers": [  ], "Events": [  ], "Additionals": [  ], "ValueTypes": [  ], "Components": [] } }