{ "Id":"Abstraction.Core.Repository.EntityRepository", "Scope":"public", "Constraint":"",  "Partial":"",  "Type":"class",  "Name":"EntityRepository", "Description":"EntityRepository extends from ContentRepository and provides Entity Framework based CRUD repository implementation.", "Comments":"", "Annotations":"", "Constructs": { "Namespace": { "Type":"Library.Parsers.Constructs.Namespace", "Name":"Abstraction.Core.Repository", "Description":"", "Comments":"" }, "Interfaces": [ "ContentRepository" ], "Constructors": [ { "Type":"", "Scope":"public", "Name":"EntityRepository", "Arguments": [ { "Type": "DbContext", "Name": "context" },{ "Type": "string", "Name": "relatedObjects" },{ "Type": "bool", "Name": "enableLazyLoading" } ], "Description":"Constructor initialization for entity repository using context, related objects and lazyloading.", "Params": [ { "Name": "context", "Value": "relatedObjects" } ], "Comments":"", "Annotations":"" } ], "StaticConstructors": [  ], "Fields": [ { "Scope":"protected",  "Constraint": "", "Type": "string", "Name":"relatedObjects", "Description":"Comma seprated list of related objects that are required to be loaded while extracting object or list of objects from repository.", "Comments":"", "Annotations":"" },{ "Scope":"protected",  "Constraint": "", "Type": "DbContext", "Name":"context", "Description":"Repository reference to database context.", "Comments":"", "Annotations":"" },{ "Scope":"protected",  "Constraint": "", "Type": "DbSet<T>", "Name":"entitySet", "Description":"Reference to entity dbset repository.", "Comments":"", "Annotations":"" } ], "Properties": [  ], "Methods": [ { "Scope":"protected", "Constraint": "virtual", "Type":"T", "Name":"GenerateNewKey", "Arguments": [ { "Type": "T", "Name": "contentObject" } ], "Description":"Override in order to provide new key generating mechanism.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"protected", "Constraint": "virtual", "Type":"object", "Name":"GetTypedKey", "Arguments": [ { "Type": "object", "Name": "key" } ], "Description":"Override to get type cast selected object or list of objects.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"protected", "Constraint": "virtual", "Type":"T", "Name":"AttachAndSaveRelatedObjects", "Arguments": [ { "Type": "T", "Name": "obj" },{ "Type": "bool", "Name": "newEntity" } ], "Description":"Override to modify object with related objects before saving.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"protected", "Constraint": "virtual", "Type":"IQueryable<T>", "Name":"QueryRecords", "Arguments": [ { "Type": "IQueryable<T>", "Name": "query" },{ "Type": "SearchFilter", "Name": "searchQuery" } ], "Description":"Find records by using entity repository interface and search filters. Normally its the only function that is required for all kind of record selections.", "Params": [ { "Name": "query", "Value": "searchQuery" } ], "Comments":"", "Annotations":"" },{ "Scope":"protected", "Constraint": "virtual", "Type":"IOrderedQueryable<T>", "Name":"SortRecords", "Arguments": [ { "Type": "IQueryable<T>", "Name": "query" },{ "Type": "SearchFilter", "Name": "searchQuery" } ], "Description":"Sort found records by using repository interface and sorting filters. Normally its the only function that is required for all sorting needs.", "Params": [ { "Name": "query", "Value": "searchQuery" } ], "Comments":"", "Annotations":"" },{ "Scope":"protected", "Constraint": "virtual", "Type":"IQueryable<T>", "Name":"QueryListRecords", "Arguments": [ { "Type": "IQueryable<T>", "Name": "query" },{ "Type": "SearchFilter", "Name": "searchQuery" } ], "Description":"List records by using entity repository interface and search filters. This is not required if QueryRecords has been implemented.", "Params": [ { "Name": "query", "Value": "searchQuery" } ], "Comments":"", "Annotations":"" },{ "Scope":"protected", "Constraint": "virtual", "Type":"IOrderedQueryable<T>", "Name":"SortListRecords", "Arguments": [ { "Type": "IQueryable<T>", "Name": "query" },{ "Type": "SearchFilter", "Name": "searchQuery" } ], "Description":"Sort listing records by using repository interface and sorting filters. This is not required if SortRecords has been implemented.", "Params": [ { "Name": "query", "Value": "searchQuery" } ], "Comments":"", "Annotations":"" },{ "Scope":"protected", "Constraint": "virtual", "Type":"IQueryable<T>", "Name":"QueryReferentialListRecords", "Arguments": [ { "Type": "IQueryable<T>", "Name": "query" },{ "Type": "SearchFilter", "Name": "searchQuery" } ], "Description":"Select list records by using entity repository interface and search filters. This is not required if QueryRecords has been implemented.", "Params": [ { "Name": "query", "Value": "searchQuery" } ], "Comments":"", "Annotations":"" },{ "Scope":"protected", "Constraint": "virtual", "Type":"IOrderedQueryable<T>", "Name":"SortReferentialListRecords", "Arguments": [ { "Type": "IQueryable<T>", "Name": "query" },{ "Type": "SearchFilter", "Name": "searchQuery" } ], "Description":"Sort selected list records by using repository interface and sorting filters. This is not required if SortRecords has been implemented.", "Params": [ { "Name": "query", "Value": "searchQuery" } ], "Comments":"", "Annotations":"" },{ "Scope":"protected", "Constraint": "virtual", "Type":"IQueryable<T>", "Name":"QueryReferentialRecords", "Arguments": [ { "Type": "IQueryable<T>", "Name": "query" },{ "Type": "SearchFilter", "Name": "searchQuery" } ], "Description":"Select records by using entity repository interface and search filters. This is not required if QueryRecords has been implemented.", "Params": [ { "Name": "query", "Value": "searchQuery" } ], "Comments":"", "Annotations":"" },{ "Scope":"protected", "Constraint": "virtual", "Type":"IOrderedQueryable<T>", "Name":"SortReferentialRecords", "Arguments": [ { "Type": "IQueryable<T>", "Name": "query" },{ "Type": "SearchFilter", "Name": "searchQuery" } ], "Description":"Sort records by using repository interface and sorting filters. This is not required if SortRecords has been implemented.", "Params": [ { "Name": "query", "Value": "searchQuery" } ], "Comments":"", "Annotations":"" },{ "Scope":"protected", "Constraint": "virtual", "Type":"IQueryable<T>", "Name":"QueryAllRecords", "Arguments": [ { "Type": "IQueryable<T>", "Name": "query" } ], "Description":"List all records by using entity repository interface and search filters. This is not required if QueryRecords has been implemented.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"protected", "Constraint": "virtual", "Type":"IOrderedQueryable<T>", "Name":"SortAllRecords", "Arguments": [ { "Type": "IQueryable<T>", "Name": "query" } ], "Description":"Sort all records by using repository interface and sorting filters. This is not required if SortRecords has been implemented.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"protected", "Constraint": "virtual", "Type":"IQueryable<T>", "Name":"QueryFindRecords", "Arguments": [ { "Type": "IQueryable<T>", "Name": "query" },{ "Type": "SearchFilter", "Name": "searchQuery" } ], "Description":"Find records by using entity repository interface and search filters. This is not required if QueryRecords has been implemented.", "Params": [ { "Name": "query", "Value": "searchQuery" } ], "Comments":"", "Annotations":"" },{ "Scope":"protected", "Constraint": "virtual", "Type":"IOrderedQueryable<T>", "Name":"SortFindRecords", "Arguments": [ { "Type": "IQueryable<T>", "Name": "query" },{ "Type": "SearchFilter", "Name": "searchQuery" } ], "Description":"Sort found records by using repository interface and sorting filters. This is not required if SortRecords has been implemented.", "Params": [ { "Name": "query", "Value": "searchQuery" } ], "Comments":"", "Annotations":"" },{ "Scope":"public", "Constraint": "virtual", "Type":"List<T>", "Name":"GetReferentialRecords", "Arguments": [ { "Type": "SearchFilter", "Name": "searchQuery" } ], "Description":"Gets list of referential records based on input selection.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"public", "Constraint": "virtual", "Type":"int", "Name":"GetReferentialTotal", "Arguments": [ { "Type": "SearchFilter", "Name": "searchQuery" } ], "Description":"Gets total count of referential records based on input selection.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"public", "Constraint": "virtual", "Type":"List<T>", "Name":"GetFindRecords", "Arguments": [ { "Type": "SearchFilter", "Name": "searchQuery" } ], "Description":"Finds list of records based on input selection.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"public", "Constraint": "virtual", "Type":"int", "Name":"GetFindTotal", "Arguments": [ { "Type": "SearchFilter", "Name": "searchQuery" } ], "Description":"Gets total count of found records.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"public", "Constraint": "virtual", "Type":"List<T>", "Name":"GetRandomList", "Arguments": [ { "Type": "SearchFilter", "Name": "searchQuery" } ], "Description":"Gets random list of objects.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"public", "Constraint": "override", "Type":"List<T>", "Name":"List", "Arguments": [ { "Type": "SearchFilter", "Name": "searchQuery" } ], "Description":"List content objects based on search filters.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"public", "Constraint": "override", "Type":"List<T>", "Name":"SelectList", "Arguments": [ { "Type": "SearchFilter", "Name": "searchQuery" } ], "Description":"Selects list of content objects based on search filters.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"public", "Constraint": "override", "Type":"List<T>", "Name":"ListAll", "Arguments": [  ], "Description":"List all content objects.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"public", "Constraint": "override", "Type":"PagedRecords<T>", "Name":"Select", "Arguments": [ { "Type": "SearchFilter", "Name": "searchQuery" } ], "Description":"Selects list of content objects based on search filters.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"public", "Constraint": "override", "Type":"PagedRecords<T>", "Name":"Find", "Arguments": [ { "Type": "SearchFilter", "Name": "searchQuery" } ], "Description":"Find page wise list of content objects based on search filters.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"public", "Constraint": "override", "Type":"T", "Name":"Get", "Arguments": [ { "Type": "Object", "Name": "id" } ], "Description":"Gets object based on provided identification.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"public", "Constraint": "override", "Type":"T", "Name":"Post", "Arguments": [ { "Type": "SearchFilter", "Name": "searchQuery" } ], "Description":"Gets object based on provided search key.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"public", "Constraint": "override", "Type":"T", "Name":"Create", "Arguments": [ { "Type": "T", "Name": "contentObject" } ], "Description":"Creates new content object.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"public", "Constraint": "override", "Type":"T", "Name":"Update", "Arguments": [ { "Type": "T", "Name": "contentObject" },{ "Type": "object", "Name": "id" } ], "Description":"Updates existing content object.", "Params": [  ], "Comments":"", "Annotations":"" },{ "Scope":"public", "Constraint": "override", "Type":"T", "Name":"Delete", "Arguments": [ { "Type": "T", "Name": "contentObject" },{ "Type": "object", "Name": "id" } ], "Description":"Deletes existing content object.", "Params": [  ], "Comments":"", "Annotations":"" } ], "InstanceFunctions": [  ], "Indexers": [  ], "Events": [  ], "Additionals": [  ], "ValueTypes": [  ], "Components": [] } }