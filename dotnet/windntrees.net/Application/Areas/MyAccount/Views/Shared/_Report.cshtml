@{
    Layout = null;

    var theme = System.Configuration.ConfigurationManager.AppSettings["theme"];
    if (string.IsNullOrEmpty(theme))
    {
        theme = "native";
    }
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="Shams Zia">
    <link rel="icon" href="@Url.Content("~/favicon.ico")">

    @Styles.Render(string.Format("~/bundles/{0}/header", theme))
    @Scripts.Render("~/bundles/modernizr")
    @Styles.Render(string.Format("~/content/{0}/bootstrap", theme))
    @Styles.Render(string.Format("~/content/{0}/fonts", theme))
    @Styles.Render(string.Format("~/content/{0}/styles", theme))
    @Styles.Render(string.Format("~/content/{0}/carousel", theme))

    <link rel="shortcut icon" href="@Url.Content("~/content/images/favicon.png")">

    @if (IsSectionDefined("Header"))
    {
        @RenderSection("Header", required: false)
    }
    else
    {
        <title></title>
    }

</head>
<body>
    <!-- basic views -->
    <script type="text/html" id="results_processing">
        <span data-bind="visible: Processing()">
            <i class="fa fa-cog fa-spin fa-2x"></i>
        </span>
    </script>
    <script type="text/html" id="results_messages">
        <span data-bind="if: ResultMessage().length > 0" class="alert">
            <span data-bind="text: ResultMessage"></span>
        </span>
    </script>
    <script type="text/html" id="form_processing">
        <span data-bind="visible: $parents[0].FormProcessing()">
            <i class="fa fa-cog fa-spin fa-2x"></i>
        </span>
    </script>
    <script type="text/html" id="form_messages">
        <span data-bind="if: $parents[0].FormResultMessage().length > 0" class="alert">
            <span data-bind="text: $parents[0].FormResultMessage"></span>
        </span>
    </script>
    <script type="text/html" id="list_results_messages">
        <span data-bind="if: ResultMessage().length > 0">
            <span data-bind="text: ResultMessage"></span>
        </span>
    </script>
    <script type="text/html" id="list_error_messages">
        <li class="alert alert-danger"><span data-bind="text: errField"></span> <span data-bind="text: errMessage"></span></li>
    </script>

    <div class="container-fluid">

        @if (IsSectionDefined("ContentHeader"))
        {
            @RenderSection("ContentHeader", required: false)
        }

        @RenderBody()

        @if (IsSectionDefined("ContentFooter"))
        {
            @RenderSection("ContentFooter", required: false)
        }
        else
        {

        }
    </div>
    <!-- END WRAPPER -->
    <!-- JAVASCRIPTS -->

    @Scripts.Render(string.Format("~/bundles/{0}/bootstrap", theme))
    @Scripts.Render(string.Format("~/bundles/wtl", theme))

    <script type="text/javascript">
        function intialize(repository) {

            ko.validation.init({
                insertMessages: false,
                decorateElement: true,
                errorElementClass: 'error'
            });

            ko.validation.rules['required'].message = '@SharedLibrary.Resources.Global.KOMessages.RequiredT';
            ko.validation.rules['min'].message = '@SharedLibrary.Resources.Global.KOMessages.MinT';
            ko.validation.rules['max'].message = '@SharedLibrary.Resources.Global.KOMessages.MaxT';
            ko.validation.rules['minLength'].message = '@SharedLibrary.Resources.Global.KOMessages.MinLengthT';
            ko.validation.rules['maxLength'].message = '@SharedLibrary.Resources.Global.KOMessages.MaxLengthT';
            ko.validation.rules['pattern'].message = '@SharedLibrary.Resources.Global.KOMessages.PatternT';
            ko.validation.rules['step'].message = '@SharedLibrary.Resources.Global.KOMessages.StepT';
            ko.validation.rules['email'].message = '@SharedLibrary.Resources.Global.KOMessages.EmailT';
            ko.validation.rules['date'].message = '@SharedLibrary.Resources.Global.KOMessages.DateT';
            ko.validation.rules['dateISO'].message = '@SharedLibrary.Resources.Global.KOMessages.DateISOT';
            ko.validation.rules['number'].message = '@SharedLibrary.Resources.Global.KOMessages.NumberT';
            ko.validation.rules['digit'].message = '@SharedLibrary.Resources.Global.KOMessages.DigitT';
            ko.validation.rules['phoneUS'].message = '@SharedLibrary.Resources.Global.KOMessages.PhoneUST';
            ko.validation.rules['equal'].message = '@SharedLibrary.Resources.Global.KOMessages.EqualT';
            ko.validation.rules['notEqual'].message = '@SharedLibrary.Resources.Global.KOMessages.NotEqualT';

            ko.validation.registerExtenders();

            repository.add(new LocaleMessage("form.new.text", '@SharedLibrary.Resources.Global.FormMessages.NewT'));
            repository.add(new LocaleMessage("form.edit.text", '@SharedLibrary.Resources.Global.FormMessages.EditT'));
            repository.add(new LocaleMessage("form.noRecord.text", '@SharedLibrary.Resources.Global.FormMessages.NoRecordT'));
            repository.add(new LocaleMessage("form.found.text", '@SharedLibrary.Resources.Global.FormMessages.FoundT'));
            repository.add(new LocaleMessage("form.records.text", '@SharedLibrary.Resources.Global.FormMessages.RecordsT'));
            repository.add(new LocaleMessage("form.displayingPage.text", '@SharedLibrary.Resources.Global.FormMessages.DisplayingPageT'));
            repository.add(new LocaleMessage("form.of.text", '@SharedLibrary.Resources.Global.FormMessages.OfT'));
            repository.add(new LocaleMessage("form.totalPages.text", '@SharedLibrary.Resources.Global.FormMessages.TotalPagesT'));
            repository.add(new LocaleMessage("standard.alertSure.text", '@SharedLibrary.Resources.Global.StandardMessages.AlertSureT'));
            repository.add(new LocaleMessage("standard.processing.text", '@SharedLibrary.Resources.Global.StandardMessages.ProcessingT'));
            repository.add(new LocaleMessage("standard.err.text", '@SharedLibrary.Resources.Global.StandardMessages.ErrT'));
            repository.add(new LocaleMessage("standard.ok.text", '@SharedLibrary.Resources.Global.StandardMessages.OkT'));
            repository.add(new LocaleMessage("standard.listloadok.text", '@SharedLibrary.Resources.Global.StandardMessages.ListLoadOk'));
            repository.add(new LocaleMessage("standard.listloaderr.text", '@SharedLibrary.Resources.Global.StandardMessages.ListLoadErr'));

            return repository;
        }
    </script>

    @if (IsSectionDefined("Scripts"))
    {
        @RenderSection("Scripts", required: false)
    }

    <script type="text/javascript">
        $(function () {
            function reposition() {
                var modal = $(this),
                    dialog = modal.find('.modal-dialog');
                modal.css('display', 'block');

                // Dividing by two centers the modal exactly, but dividing by three
                // or four works better for larger screens.
                dialog.css("margin-top", Math.max(0, ($(window).height() - dialog.height()) / 2));
            }
            // Reposition when a modal is shown
            $('.modal').on('show.bs.modal', reposition);
            // Reposition when the window is resized
            $(window).on('resize', function () {
                $('.modal:visible').each(reposition);
            });
        });
    </script>

    <script type="text/javascript">
        function applyLocaleSettings() {

            try {
                var direction = '@Session["bodyDirection"]';
                var direction = (direction === null || direction === undefined) ? "" : direction;

                if (direction.startsWith("rtl")) {

                    document.body.dir = "rtl";

                    var navHeaderNodes = document.getElementsByClassName("navbar-header");
                    for (var i = 0; i < navHeaderNodes.length; i++) {

                        if (navHeaderNodes[i].className.indexOf("navbar-right") < 0) {

                            navHeaderNodes[i].attributes["class"].value = (navHeaderNodes[i].attributes["class"].value === "navbar-header") ? "navbar-header navbar-right" : (navHeaderNodes[i].attributes["class"].value === "navbar-header navbar-right") ? "navbar-header" : navHeaderNodes[i].attributes["class"].value;
                        }

                    }

                    var navFormNodes = document.getElementsByClassName("navbar-form");
                    for (var i = 0; i < navFormNodes.length; i++) {
                        navFormNodes[i].attributes["class"].value = (navFormNodes[i].attributes["class"].value === "navbar-form navbar-left") ? "navbar-form navbar-right" : (navFormNodes[i].attributes["class"].value === "navbar-form navbar-right") ? "navbar-form navbar-left" : navFormNodes[i].attributes["class"].value;
                    }

                    var textLeftNodes = document.getElementsByClassName("_textleft");
                    for (var i = 0; i < textLeftNodes.length; i++) {
                        textLeftNodes[i].attributes["class"].value = textLeftNodes[i].attributes["class"].value.toString().replace("text-left", "").trim();
                        textLeftNodes[i].attributes["class"].value = textLeftNodes[i].attributes["class"].value.toString().replace("text-right", "").trim();
                        textLeftNodes[i].attributes["class"].value = textLeftNodes[i].attributes["class"].value.toString().trim().concat(" text-left").trim();
                    }

                    var textRightNodes = document.getElementsByClassName("textright_");
                    for (var i = 0; i < textRightNodes.length; i++) {
                        textRightNodes[i].attributes["class"].value = textRightNodes[i].attributes["class"].value.toString().replace("text-right", "").trim();
                        textRightNodes[i].attributes["class"].value = textRightNodes[i].attributes["class"].value.toString().replace("text-left", "").trim();
                        textRightNodes[i].attributes["class"].value = textRightNodes[i].attributes["class"].value.toString().trim().concat(" text-right").trim();
                    }

                    var pullLeftNodes = document.getElementsByClassName("_pullleft");
                    for (var i = 0; i < pullLeftNodes.length; i++) {
                        pullLeftNodes[i].attributes["class"].value = pullLeftNodes[i].attributes["class"].value.toString().replace("pull-left", "").trim();
                        pullLeftNodes[i].attributes["class"].value = pullLeftNodes[i].attributes["class"].value.toString().replace("pull-right", "").trim();
                        pullLeftNodes[i].attributes["class"].value = pullLeftNodes[i].attributes["class"].value.toString().trim().concat(" pull-left").trim();
                    }

                    var pullRightNodes = document.getElementsByClassName("pullright_");
                    for (var i = 0; i < pullRightNodes.length; i++) {
                        pullRightNodes[i].attributes["class"].value = pullRightNodes[i].attributes["class"].value.toString().replace("pull-right", "").trim();
                        pullRightNodes[i].attributes["class"].value = pullRightNodes[i].attributes["class"].value.toString().replace("pull-left", "").trim();
                        pullRightNodes[i].attributes["class"].value = pullRightNodes[i].attributes["class"].value.toString().trim().concat(" pull-right").trim();
                    }

                    var controlLableNodes = document.getElementsByClassName("_control_label_ur");
                    for (var i = 0; i < controlLableNodes.length; i++) {
                        controlLableNodes[i].attributes["class"].value = controlLableNodes[i].attributes["class"].value.toString().replace("control-label-ur", "").trim();
                        controlLableNodes[i].attributes["class"].value = controlLableNodes[i].attributes["class"].value.toString().trim().concat(" control-label-ur").trim();
                    }

                    var pullVLeftNodes = document.getElementsByClassName("_vpullleft");
                    for (var i = 0; i < pullVLeftNodes.length; i++) {
                        if (window.matchMedia("(min-width: 768px)").matches) {
                            pullVLeftNodes[i].attributes["class"].value = pullVLeftNodes[i].attributes["class"].value.toString().replace("pull-left", "").trim();
                            pullVLeftNodes[i].attributes["class"].value = pullVLeftNodes[i].attributes["class"].value.toString().replace("pull-right", "").trim();
                            pullVLeftNodes[i].attributes["class"].value = pullVLeftNodes[i].attributes["class"].value.toString().trim().concat(" pull-left").trim();
                        }
                    }

                    var pullVRightNodes = document.getElementsByClassName("vpullright_");
                    for (var i = 0; i < pullVRightNodes.length; i++) {
                        if (window.matchMedia("(min-width: 768px)").matches) {
                            pullVRightNodes[i].attributes["class"].value = pullVRightNodes[i].attributes["class"].value.toString().replace("pull-right", "").trim();
                            pullVRightNodes[i].attributes["class"].value = pullVRightNodes[i].attributes["class"].value.toString().replace("pull-left", "").trim();
                            pullVRightNodes[i].attributes["class"].value = pullVRightNodes[i].attributes["class"].value.toString().trim().concat(" pull-right").trim();
                        }
                    }

                }

            } catch (exception) {

            }
        }

        function applyModalLocaleSettings() {

            try {

                var direction = '@Session["bodyDirection"]';
                var direction = (direction === null || direction === undefined) ? "" : direction;

                if (direction.startsWith("rtl")) {

                    document.body.dir = "rtl";

                    var textLeftNodes = document.getElementsByClassName("_mdtextleft");
                    for (var i = 0; i < textLeftNodes.length; i++) {
                        textLeftNodes[i].attributes["class"].value = textLeftNodes[i].attributes["class"].value.toString().replace("text-left", "").trim();
                        textLeftNodes[i].attributes["class"].value = textLeftNodes[i].attributes["class"].value.toString().replace("text-right", "").trim();
                        textLeftNodes[i].attributes["class"].value = textLeftNodes[i].attributes["class"].value.toString().trim().concat(" text-left").trim();
                    }

                    var textRightNodes = document.getElementsByClassName("mdtextright_");
                    for (var i = 0; i < textRightNodes.length; i++) {
                        textRightNodes[i].attributes["class"].value = textRightNodes[i].attributes["class"].value.toString().replace("text-right", "").trim();
                        textRightNodes[i].attributes["class"].value = textRightNodes[i].attributes["class"].value.toString().replace("text-left", "").trim();
                        textRightNodes[i].attributes["class"].value = textRightNodes[i].attributes["class"].value.toString().trim().concat(" text-right").trim();
                    }

                    var pullLeftNodes = document.getElementsByClassName("_mdpullleft");
                    for (var i = 0; i < pullLeftNodes.length; i++) {
                        if (window.matchMedia("(min-width: 1024px)").matches) {
                            pullLeftNodes[i].attributes["class"].value = pullLeftNodes[i].attributes["class"].value.toString().replace("pull-left", "").trim();
                            pullLeftNodes[i].attributes["class"].value = pullLeftNodes[i].attributes["class"].value.toString().replace("pull-right", "").trim();
                            pullLeftNodes[i].attributes["class"].value = pullLeftNodes[i].attributes["class"].value.toString().trim().concat(" pull-left").trim();
                        }
                    }

                    var pullRightNodes = document.getElementsByClassName("mdpullright_");
                    for (var i = 0; i < pullRightNodes.length; i++) {
                        if (window.matchMedia("(min-width: 1024px)").matches) {
                            pullRightNodes[i].attributes["class"].value = pullRightNodes[i].attributes["class"].value.toString().replace("pull-right", "").trim();
                            pullRightNodes[i].attributes["class"].value = pullRightNodes[i].attributes["class"].value.toString().replace("pull-left", "").trim();
                            pullRightNodes[i].attributes["class"].value = pullRightNodes[i].attributes["class"].value.toString().trim().concat(" pull-right").trim();
                        }
                    }
                }

            } catch (exception) {

            }
        }

        function onWindowReposition() {
            var modal = $(this);
            var dialog = modal.find('.modal-dialog');
            modal.css('display', 'block');
            dialog.css("margin-top", Math.max(0, ($(window).height() - dialog.height()) / 2));
        }

        function onModalDisplay() {
            var modal = $(this);
            var dialog = modal.find('.modal-dialog');
            modal.css('display', 'block');
            dialog.css("margin-top", Math.max(0, ($(window).height() - dialog.height()) / 2));
            applyModalLocaleSettings();
        }

        function setEvents() {
            // Reposition when a modal is shown
            $('.modal').on('show.bs.modal', onModalDisplay);
            $('.modal').on('apply-form-locale', applyModalLocaleSettings);
            // Reposition when the window is resized
            $(window).on('resize', function () {
                $('.modal:visible').each(onWindowReposition);
            });
            $(window).on('view-direction-change', function () {
                applyLocaleSettings();
            });
            applyLocaleSettings();
        };
        $(function () {
            setEvents();
        });
    </script>
</body>
</html>